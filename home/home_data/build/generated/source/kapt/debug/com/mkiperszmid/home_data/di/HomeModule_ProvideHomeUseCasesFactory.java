// Generated by Dagger (https://dagger.dev).
package com.mkiperszmid.home_data.di;

import com.mkiperszmid.home_domain.home.usecase.HomeUseCases;
import com.mkiperszmid.home_domain.repository.HomeRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class HomeModule_ProvideHomeUseCasesFactory implements Factory<HomeUseCases> {
  private final Provider<HomeRepository> repositoryProvider;

  public HomeModule_ProvideHomeUseCasesFactory(Provider<HomeRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public HomeUseCases get() {
    return provideHomeUseCases(repositoryProvider.get());
  }

  public static HomeModule_ProvideHomeUseCasesFactory create(
      Provider<HomeRepository> repositoryProvider) {
    return new HomeModule_ProvideHomeUseCasesFactory(repositoryProvider);
  }

  public static HomeUseCases provideHomeUseCases(HomeRepository repository) {
    return Preconditions.checkNotNullFromProvides(HomeModule.INSTANCE.provideHomeUseCases(repository));
  }
}
