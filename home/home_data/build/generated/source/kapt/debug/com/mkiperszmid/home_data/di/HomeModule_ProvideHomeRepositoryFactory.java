// Generated by Dagger (https://dagger.dev).
package com.mkiperszmid.home_data.di;

import androidx.work.WorkManager;
import com.mkiperszmid.home_data.local.HomeDao;
import com.mkiperszmid.home_data.remote.HomeApi;
import com.mkiperszmid.home_domain.alarm.AlarmHandler;
import com.mkiperszmid.home_domain.repository.HomeRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class HomeModule_ProvideHomeRepositoryFactory implements Factory<HomeRepository> {
  private final Provider<HomeDao> daoProvider;

  private final Provider<HomeApi> apiProvider;

  private final Provider<AlarmHandler> alarmHandlerProvider;

  private final Provider<WorkManager> workManagerProvider;

  public HomeModule_ProvideHomeRepositoryFactory(Provider<HomeDao> daoProvider,
      Provider<HomeApi> apiProvider, Provider<AlarmHandler> alarmHandlerProvider,
      Provider<WorkManager> workManagerProvider) {
    this.daoProvider = daoProvider;
    this.apiProvider = apiProvider;
    this.alarmHandlerProvider = alarmHandlerProvider;
    this.workManagerProvider = workManagerProvider;
  }

  @Override
  public HomeRepository get() {
    return provideHomeRepository(daoProvider.get(), apiProvider.get(), alarmHandlerProvider.get(), workManagerProvider.get());
  }

  public static HomeModule_ProvideHomeRepositoryFactory create(Provider<HomeDao> daoProvider,
      Provider<HomeApi> apiProvider, Provider<AlarmHandler> alarmHandlerProvider,
      Provider<WorkManager> workManagerProvider) {
    return new HomeModule_ProvideHomeRepositoryFactory(daoProvider, apiProvider, alarmHandlerProvider, workManagerProvider);
  }

  public static HomeRepository provideHomeRepository(HomeDao dao, HomeApi api,
      AlarmHandler alarmHandler, WorkManager workManager) {
    return Preconditions.checkNotNullFromProvides(HomeModule.INSTANCE.provideHomeRepository(dao, api, alarmHandler, workManager));
  }
}
