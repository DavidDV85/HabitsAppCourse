// Generated by Dagger (https://dagger.dev).
package com.mkiperszmid.onboarding_data.di;

import com.mkiperszmid.onboarding_domain.repository.OnboardingRepository;
import com.mkiperszmid.onboarding_domain.usecase.HasSeenOnboardingUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class OnboardingModule_ProvideHasSeenOnboardingUseCaseFactory implements Factory<HasSeenOnboardingUseCase> {
  private final Provider<OnboardingRepository> repositoryProvider;

  public OnboardingModule_ProvideHasSeenOnboardingUseCaseFactory(
      Provider<OnboardingRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public HasSeenOnboardingUseCase get() {
    return provideHasSeenOnboardingUseCase(repositoryProvider.get());
  }

  public static OnboardingModule_ProvideHasSeenOnboardingUseCaseFactory create(
      Provider<OnboardingRepository> repositoryProvider) {
    return new OnboardingModule_ProvideHasSeenOnboardingUseCaseFactory(repositoryProvider);
  }

  public static HasSeenOnboardingUseCase provideHasSeenOnboardingUseCase(
      OnboardingRepository repository) {
    return Preconditions.checkNotNullFromProvides(OnboardingModule.INSTANCE.provideHasSeenOnboardingUseCase(repository));
  }
}
