// Generated by Dagger (https://dagger.dev).
package com.mkiperszmid.onboarding_presentation;

import com.mkiperszmid.onboarding_domain.usecase.CompleteOnboardingUseCase;
import com.mkiperszmid.onboarding_domain.usecase.HasSeenOnboardingUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class OnboardingViewModel_Factory implements Factory<OnboardingViewModel> {
  private final Provider<HasSeenOnboardingUseCase> hasSeenOnboardingUseCaseProvider;

  private final Provider<CompleteOnboardingUseCase> completeOnboardingUseCaseProvider;

  public OnboardingViewModel_Factory(
      Provider<HasSeenOnboardingUseCase> hasSeenOnboardingUseCaseProvider,
      Provider<CompleteOnboardingUseCase> completeOnboardingUseCaseProvider) {
    this.hasSeenOnboardingUseCaseProvider = hasSeenOnboardingUseCaseProvider;
    this.completeOnboardingUseCaseProvider = completeOnboardingUseCaseProvider;
  }

  @Override
  public OnboardingViewModel get() {
    return newInstance(hasSeenOnboardingUseCaseProvider.get(), completeOnboardingUseCaseProvider.get());
  }

  public static OnboardingViewModel_Factory create(
      Provider<HasSeenOnboardingUseCase> hasSeenOnboardingUseCaseProvider,
      Provider<CompleteOnboardingUseCase> completeOnboardingUseCaseProvider) {
    return new OnboardingViewModel_Factory(hasSeenOnboardingUseCaseProvider, completeOnboardingUseCaseProvider);
  }

  public static OnboardingViewModel newInstance(HasSeenOnboardingUseCase hasSeenOnboardingUseCase,
      CompleteOnboardingUseCase completeOnboardingUseCase) {
    return new OnboardingViewModel(hasSeenOnboardingUseCase, completeOnboardingUseCase);
  }
}
