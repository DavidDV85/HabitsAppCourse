// Generated by Dagger (https://dagger.dev).
package com.mkiperszmid.authentication_presentation.login;

import com.mkiperszmid.authentication_domain.usecase.LoginUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.mkiperszmid.core_data.di.IoDispatcher")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LoginViewModel_Factory implements Factory<LoginViewModel> {
  private final Provider<LoginUseCases> loginUseCasesProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public LoginViewModel_Factory(Provider<LoginUseCases> loginUseCasesProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    this.loginUseCasesProvider = loginUseCasesProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public LoginViewModel get() {
    return newInstance(loginUseCasesProvider.get(), dispatcherProvider.get());
  }

  public static LoginViewModel_Factory create(Provider<LoginUseCases> loginUseCasesProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    return new LoginViewModel_Factory(loginUseCasesProvider, dispatcherProvider);
  }

  public static LoginViewModel newInstance(LoginUseCases loginUseCases,
      CoroutineDispatcher dispatcher) {
    return new LoginViewModel(loginUseCases, dispatcher);
  }
}
