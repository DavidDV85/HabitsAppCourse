// Generated by Dagger (https://dagger.dev).
package com.mkiperszmid.authentication_presentation.signup;

import com.mkiperszmid.authentication_domain.usecase.SignupUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SignupViewModel_Factory implements Factory<SignupViewModel> {
  private final Provider<SignupUseCases> signupUseCasesProvider;

  public SignupViewModel_Factory(Provider<SignupUseCases> signupUseCasesProvider) {
    this.signupUseCasesProvider = signupUseCasesProvider;
  }

  @Override
  public SignupViewModel get() {
    return newInstance(signupUseCasesProvider.get());
  }

  public static SignupViewModel_Factory create(Provider<SignupUseCases> signupUseCasesProvider) {
    return new SignupViewModel_Factory(signupUseCasesProvider);
  }

  public static SignupViewModel newInstance(SignupUseCases signupUseCases) {
    return new SignupViewModel(signupUseCases);
  }
}
