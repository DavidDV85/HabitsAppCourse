// Generated by Dagger (https://dagger.dev).
package com.mkiperszmid.authentication_data.di;

import com.mkiperszmid.authentication_domain.repository.AuthenticationRepository;
import com.mkiperszmid.authentication_domain.usecase.GetUserIdUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AuthenticationModule_ProvideGetUserIdUseCaseFactory implements Factory<GetUserIdUseCase> {
  private final Provider<AuthenticationRepository> repositoryProvider;

  public AuthenticationModule_ProvideGetUserIdUseCaseFactory(
      Provider<AuthenticationRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public GetUserIdUseCase get() {
    return provideGetUserIdUseCase(repositoryProvider.get());
  }

  public static AuthenticationModule_ProvideGetUserIdUseCaseFactory create(
      Provider<AuthenticationRepository> repositoryProvider) {
    return new AuthenticationModule_ProvideGetUserIdUseCaseFactory(repositoryProvider);
  }

  public static GetUserIdUseCase provideGetUserIdUseCase(AuthenticationRepository repository) {
    return Preconditions.checkNotNullFromProvides(AuthenticationModule.INSTANCE.provideGetUserIdUseCase(repository));
  }
}
