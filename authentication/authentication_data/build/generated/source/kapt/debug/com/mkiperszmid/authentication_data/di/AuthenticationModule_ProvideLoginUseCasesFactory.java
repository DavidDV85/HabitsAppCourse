// Generated by Dagger (https://dagger.dev).
package com.mkiperszmid.authentication_data.di;

import com.mkiperszmid.authentication_domain.matcher.EmailMatcher;
import com.mkiperszmid.authentication_domain.repository.AuthenticationRepository;
import com.mkiperszmid.authentication_domain.usecase.LoginUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AuthenticationModule_ProvideLoginUseCasesFactory implements Factory<LoginUseCases> {
  private final Provider<AuthenticationRepository> repositoryProvider;

  private final Provider<EmailMatcher> emailMatcherProvider;

  public AuthenticationModule_ProvideLoginUseCasesFactory(
      Provider<AuthenticationRepository> repositoryProvider,
      Provider<EmailMatcher> emailMatcherProvider) {
    this.repositoryProvider = repositoryProvider;
    this.emailMatcherProvider = emailMatcherProvider;
  }

  @Override
  public LoginUseCases get() {
    return provideLoginUseCases(repositoryProvider.get(), emailMatcherProvider.get());
  }

  public static AuthenticationModule_ProvideLoginUseCasesFactory create(
      Provider<AuthenticationRepository> repositoryProvider,
      Provider<EmailMatcher> emailMatcherProvider) {
    return new AuthenticationModule_ProvideLoginUseCasesFactory(repositoryProvider, emailMatcherProvider);
  }

  public static LoginUseCases provideLoginUseCases(AuthenticationRepository repository,
      EmailMatcher emailMatcher) {
    return Preconditions.checkNotNullFromProvides(AuthenticationModule.INSTANCE.provideLoginUseCases(repository, emailMatcher));
  }
}
